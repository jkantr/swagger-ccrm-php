<?php
/**
 * PartialToOrderModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Continuity CRM
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PartialToOrderModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PartialToOrderModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PartialToOrderModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'order_products' => '\Swagger\Client\Model\OrderProduct[]',
        'ip_address' => 'string',
        'shipping_method_id' => 'int',
        'affiliate_id' => 'string',
        'sub_id' => 'string',
        'payment_type' => 'int',
        'credit_card_number' => 'string',
        'credit_card_expiration_month' => 'int',
        'credit_card_expiration_year' => 'int',
        'credit_card_cvv' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'order_products' => 'OrderProducts',
        'ip_address' => 'IPAddress',
        'shipping_method_id' => 'ShippingMethodId',
        'affiliate_id' => 'AffiliateId',
        'sub_id' => 'SubId',
        'payment_type' => 'PaymentType',
        'credit_card_number' => 'CreditCardNumber',
        'credit_card_expiration_month' => 'CreditCardExpirationMonth',
        'credit_card_expiration_year' => 'CreditCardExpirationYear',
        'credit_card_cvv' => 'CreditCardCVV'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'order_products' => 'setOrderProducts',
        'ip_address' => 'setIpAddress',
        'shipping_method_id' => 'setShippingMethodId',
        'affiliate_id' => 'setAffiliateId',
        'sub_id' => 'setSubId',
        'payment_type' => 'setPaymentType',
        'credit_card_number' => 'setCreditCardNumber',
        'credit_card_expiration_month' => 'setCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'setCreditCardExpirationYear',
        'credit_card_cvv' => 'setCreditCardCvv'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'order_products' => 'getOrderProducts',
        'ip_address' => 'getIpAddress',
        'shipping_method_id' => 'getShippingMethodId',
        'affiliate_id' => 'getAffiliateId',
        'sub_id' => 'getSubId',
        'payment_type' => 'getPaymentType',
        'credit_card_number' => 'getCreditCardNumber',
        'credit_card_expiration_month' => 'getCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'getCreditCardExpirationYear',
        'credit_card_cvv' => 'getCreditCardCvv'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PAYMENT_TYPE_1 = 1;
    const PAYMENT_TYPE_2 = 2;
    const PAYMENT_TYPE_3 = 3;
    const PAYMENT_TYPE_4 = 4;
    const PAYMENT_TYPE_5 = 5;
    const CREDIT_CARD_EXPIRATION_MONTH_1 = 1;
    const CREDIT_CARD_EXPIRATION_MONTH_2 = 2;
    const CREDIT_CARD_EXPIRATION_MONTH_3 = 3;
    const CREDIT_CARD_EXPIRATION_MONTH_4 = 4;
    const CREDIT_CARD_EXPIRATION_MONTH_5 = 5;
    const CREDIT_CARD_EXPIRATION_MONTH_6 = 6;
    const CREDIT_CARD_EXPIRATION_MONTH_7 = 7;
    const CREDIT_CARD_EXPIRATION_MONTH_8 = 8;
    const CREDIT_CARD_EXPIRATION_MONTH_9 = 9;
    const CREDIT_CARD_EXPIRATION_MONTH_10 = 10;
    const CREDIT_CARD_EXPIRATION_MONTH_11 = 11;
    const CREDIT_CARD_EXPIRATION_MONTH_12 = 12;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_1,
            self::PAYMENT_TYPE_2,
            self::PAYMENT_TYPE_3,
            self::PAYMENT_TYPE_4,
            self::PAYMENT_TYPE_5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCreditCardExpirationMonthAllowableValues()
    {
        return [
            self::CREDIT_CARD_EXPIRATION_MONTH_1,
            self::CREDIT_CARD_EXPIRATION_MONTH_2,
            self::CREDIT_CARD_EXPIRATION_MONTH_3,
            self::CREDIT_CARD_EXPIRATION_MONTH_4,
            self::CREDIT_CARD_EXPIRATION_MONTH_5,
            self::CREDIT_CARD_EXPIRATION_MONTH_6,
            self::CREDIT_CARD_EXPIRATION_MONTH_7,
            self::CREDIT_CARD_EXPIRATION_MONTH_8,
            self::CREDIT_CARD_EXPIRATION_MONTH_9,
            self::CREDIT_CARD_EXPIRATION_MONTH_10,
            self::CREDIT_CARD_EXPIRATION_MONTH_11,
            self::CREDIT_CARD_EXPIRATION_MONTH_12,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_products'] = isset($data['order_products']) ? $data['order_products'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['shipping_method_id'] = isset($data['shipping_method_id']) ? $data['shipping_method_id'] : null;
        $this->container['affiliate_id'] = isset($data['affiliate_id']) ? $data['affiliate_id'] : null;
        $this->container['sub_id'] = isset($data['sub_id']) ? $data['sub_id'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['credit_card_number'] = isset($data['credit_card_number']) ? $data['credit_card_number'] : null;
        $this->container['credit_card_expiration_month'] = isset($data['credit_card_expiration_month']) ? $data['credit_card_expiration_month'] : null;
        $this->container['credit_card_expiration_year'] = isset($data['credit_card_expiration_year']) ? $data['credit_card_expiration_year'] : null;
        $this->container['credit_card_cvv'] = isset($data['credit_card_cvv']) ? $data['credit_card_cvv'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['shipping_method_id'] === null) {
            $invalid_properties[] = "'shipping_method_id' can't be null";
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'payment_type', must be one of #{allowed_values}.";
        }

        if ($this->container['credit_card_number'] === null) {
            $invalid_properties[] = "'credit_card_number' can't be null";
        }
        if ($this->container['credit_card_expiration_month'] === null) {
            $invalid_properties[] = "'credit_card_expiration_month' can't be null";
        }
        $allowed_values = array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12");
        if (!in_array($this->container['credit_card_expiration_month'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'credit_card_expiration_month', must be one of #{allowed_values}.";
        }

        if ($this->container['credit_card_expiration_year'] === null) {
            $invalid_properties[] = "'credit_card_expiration_year' can't be null";
        }
        if ($this->container['credit_card_cvv'] === null) {
            $invalid_properties[] = "'credit_card_cvv' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['shipping_method_id'] === null) {
            return false;
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['credit_card_number'] === null) {
            return false;
        }
        if ($this->container['credit_card_expiration_month'] === null) {
            return false;
        }
        $allowed_values = array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12");
        if (!in_array($this->container['credit_card_expiration_month'], $allowed_values)) {
            return false;
        }
        if ($this->container['credit_card_expiration_year'] === null) {
            return false;
        }
        if ($this->container['credit_card_cvv'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_products
     * @return \Swagger\Client\Model\OrderProduct[]
     */
    public function getOrderProducts()
    {
        return $this->container['order_products'];
    }

    /**
     * Sets order_products
     * @param \Swagger\Client\Model\OrderProduct[] $order_products
     * @return $this
     */
    public function setOrderProducts($order_products)
    {
        $this->container['order_products'] = $order_products;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets shipping_method_id
     * @return int
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     * @param int $shipping_method_id
     * @return $this
     */
    public function setShippingMethodId($shipping_method_id)
    {
        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }

    /**
     * Gets affiliate_id
     * @return string
     */
    public function getAffiliateId()
    {
        return $this->container['affiliate_id'];
    }

    /**
     * Sets affiliate_id
     * @param string $affiliate_id
     * @return $this
     */
    public function setAffiliateId($affiliate_id)
    {
        $this->container['affiliate_id'] = $affiliate_id;

        return $this;
    }

    /**
     * Gets sub_id
     * @return string
     */
    public function getSubId()
    {
        return $this->container['sub_id'];
    }

    /**
     * Sets sub_id
     * @param string $sub_id
     * @return $this
     */
    public function setSubId($sub_id)
    {
        $this->container['sub_id'] = $sub_id;

        return $this;
    }

    /**
     * Gets payment_type
     * @return int
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     * @param int $payment_type
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowed_values = array('1', '2', '3', '4', '5');
        if (!in_array($payment_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'payment_type', must be one of '1', '2', '3', '4', '5'");
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets credit_card_number
     * @return string
     */
    public function getCreditCardNumber()
    {
        return $this->container['credit_card_number'];
    }

    /**
     * Sets credit_card_number
     * @param string $credit_card_number
     * @return $this
     */
    public function setCreditCardNumber($credit_card_number)
    {
        $this->container['credit_card_number'] = $credit_card_number;

        return $this;
    }

    /**
     * Gets credit_card_expiration_month
     * @return int
     */
    public function getCreditCardExpirationMonth()
    {
        return $this->container['credit_card_expiration_month'];
    }

    /**
     * Sets credit_card_expiration_month
     * @param int $credit_card_expiration_month
     * @return $this
     */
    public function setCreditCardExpirationMonth($credit_card_expiration_month)
    {
        $allowed_values = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12');
        if (!in_array($credit_card_expiration_month, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'credit_card_expiration_month', must be one of '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'");
        }
        $this->container['credit_card_expiration_month'] = $credit_card_expiration_month;

        return $this;
    }

    /**
     * Gets credit_card_expiration_year
     * @return int
     */
    public function getCreditCardExpirationYear()
    {
        return $this->container['credit_card_expiration_year'];
    }

    /**
     * Sets credit_card_expiration_year
     * @param int $credit_card_expiration_year
     * @return $this
     */
    public function setCreditCardExpirationYear($credit_card_expiration_year)
    {
        $this->container['credit_card_expiration_year'] = $credit_card_expiration_year;

        return $this;
    }

    /**
     * Gets credit_card_cvv
     * @return string
     */
    public function getCreditCardCvv()
    {
        return $this->container['credit_card_cvv'];
    }

    /**
     * Sets credit_card_cvv
     * @param string $credit_card_cvv
     * @return $this
     */
    public function setCreditCardCvv($credit_card_cvv)
    {
        $this->container['credit_card_cvv'] = $credit_card_cvv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


