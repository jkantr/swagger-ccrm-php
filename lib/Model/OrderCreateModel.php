<?php
/**
 * OrderCreateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Continuity CRM
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderCreateModel Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderCreateModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderCreateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'customer_id' => 'int',
        'shipping_first_name' => 'string',
        'shipping_last_name' => 'string',
        'shipping_address1' => 'string',
        'shipping_address2' => 'string',
        'shipping_city' => 'string',
        'shipping_province' => 'string',
        'shipping_postal_code' => 'string',
        'shipping_country' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'billing_first_name' => 'string',
        'billing_last_name' => 'string',
        'billing_address1' => 'string',
        'billing_address2' => 'string',
        'billing_city' => 'string',
        'billing_province' => 'string',
        'billing_postal_code' => 'string',
        'billing_country' => 'string',
        'shipping_method_id' => 'int',
        'affiliate_id' => 'int',
        'sub_id' => 'int',
        'ip_address' => 'string',
        'order_products' => '\Swagger\Client\Model\OrderProduct[]',
        'payment_type' => 'int',
        'credit_card_number' => 'string',
        'credit_card_expiration_month' => 'int',
        'credit_card_expiration_year' => 'int',
        'credit_card_cvv' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'customer_id' => 'CustomerId',
        'shipping_first_name' => 'ShippingFirstName',
        'shipping_last_name' => 'ShippingLastName',
        'shipping_address1' => 'ShippingAddress1',
        'shipping_address2' => 'ShippingAddress2',
        'shipping_city' => 'ShippingCity',
        'shipping_province' => 'ShippingProvince',
        'shipping_postal_code' => 'ShippingPostalCode',
        'shipping_country' => 'ShippingCountry',
        'phone' => 'Phone',
        'email' => 'Email',
        'billing_first_name' => 'BillingFirstName',
        'billing_last_name' => 'BillingLastName',
        'billing_address1' => 'BillingAddress1',
        'billing_address2' => 'BillingAddress2',
        'billing_city' => 'BillingCity',
        'billing_province' => 'BillingProvince',
        'billing_postal_code' => 'BillingPostalCode',
        'billing_country' => 'BillingCountry',
        'shipping_method_id' => 'ShippingMethodId',
        'affiliate_id' => 'AffiliateId',
        'sub_id' => 'SubId',
        'ip_address' => 'IPAddress',
        'order_products' => 'OrderProducts',
        'payment_type' => 'PaymentType',
        'credit_card_number' => 'CreditCardNumber',
        'credit_card_expiration_month' => 'CreditCardExpirationMonth',
        'credit_card_expiration_year' => 'CreditCardExpirationYear',
        'credit_card_cvv' => 'CreditCardCVV'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'customer_id' => 'setCustomerId',
        'shipping_first_name' => 'setShippingFirstName',
        'shipping_last_name' => 'setShippingLastName',
        'shipping_address1' => 'setShippingAddress1',
        'shipping_address2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_province' => 'setShippingProvince',
        'shipping_postal_code' => 'setShippingPostalCode',
        'shipping_country' => 'setShippingCountry',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'billing_first_name' => 'setBillingFirstName',
        'billing_last_name' => 'setBillingLastName',
        'billing_address1' => 'setBillingAddress1',
        'billing_address2' => 'setBillingAddress2',
        'billing_city' => 'setBillingCity',
        'billing_province' => 'setBillingProvince',
        'billing_postal_code' => 'setBillingPostalCode',
        'billing_country' => 'setBillingCountry',
        'shipping_method_id' => 'setShippingMethodId',
        'affiliate_id' => 'setAffiliateId',
        'sub_id' => 'setSubId',
        'ip_address' => 'setIpAddress',
        'order_products' => 'setOrderProducts',
        'payment_type' => 'setPaymentType',
        'credit_card_number' => 'setCreditCardNumber',
        'credit_card_expiration_month' => 'setCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'setCreditCardExpirationYear',
        'credit_card_cvv' => 'setCreditCardCvv'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'customer_id' => 'getCustomerId',
        'shipping_first_name' => 'getShippingFirstName',
        'shipping_last_name' => 'getShippingLastName',
        'shipping_address1' => 'getShippingAddress1',
        'shipping_address2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_province' => 'getShippingProvince',
        'shipping_postal_code' => 'getShippingPostalCode',
        'shipping_country' => 'getShippingCountry',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'billing_first_name' => 'getBillingFirstName',
        'billing_last_name' => 'getBillingLastName',
        'billing_address1' => 'getBillingAddress1',
        'billing_address2' => 'getBillingAddress2',
        'billing_city' => 'getBillingCity',
        'billing_province' => 'getBillingProvince',
        'billing_postal_code' => 'getBillingPostalCode',
        'billing_country' => 'getBillingCountry',
        'shipping_method_id' => 'getShippingMethodId',
        'affiliate_id' => 'getAffiliateId',
        'sub_id' => 'getSubId',
        'ip_address' => 'getIpAddress',
        'order_products' => 'getOrderProducts',
        'payment_type' => 'getPaymentType',
        'credit_card_number' => 'getCreditCardNumber',
        'credit_card_expiration_month' => 'getCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'getCreditCardExpirationYear',
        'credit_card_cvv' => 'getCreditCardCvv'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PAYMENT_TYPE_1 = 1;
    const PAYMENT_TYPE_2 = 2;
    const PAYMENT_TYPE_3 = 3;
    const PAYMENT_TYPE_4 = 4;
    const PAYMENT_TYPE_5 = 5;
    const CREDIT_CARD_EXPIRATION_MONTH_1 = 1;
    const CREDIT_CARD_EXPIRATION_MONTH_2 = 2;
    const CREDIT_CARD_EXPIRATION_MONTH_3 = 3;
    const CREDIT_CARD_EXPIRATION_MONTH_4 = 4;
    const CREDIT_CARD_EXPIRATION_MONTH_5 = 5;
    const CREDIT_CARD_EXPIRATION_MONTH_6 = 6;
    const CREDIT_CARD_EXPIRATION_MONTH_7 = 7;
    const CREDIT_CARD_EXPIRATION_MONTH_8 = 8;
    const CREDIT_CARD_EXPIRATION_MONTH_9 = 9;
    const CREDIT_CARD_EXPIRATION_MONTH_10 = 10;
    const CREDIT_CARD_EXPIRATION_MONTH_11 = 11;
    const CREDIT_CARD_EXPIRATION_MONTH_12 = 12;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_1,
            self::PAYMENT_TYPE_2,
            self::PAYMENT_TYPE_3,
            self::PAYMENT_TYPE_4,
            self::PAYMENT_TYPE_5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCreditCardExpirationMonthAllowableValues()
    {
        return [
            self::CREDIT_CARD_EXPIRATION_MONTH_1,
            self::CREDIT_CARD_EXPIRATION_MONTH_2,
            self::CREDIT_CARD_EXPIRATION_MONTH_3,
            self::CREDIT_CARD_EXPIRATION_MONTH_4,
            self::CREDIT_CARD_EXPIRATION_MONTH_5,
            self::CREDIT_CARD_EXPIRATION_MONTH_6,
            self::CREDIT_CARD_EXPIRATION_MONTH_7,
            self::CREDIT_CARD_EXPIRATION_MONTH_8,
            self::CREDIT_CARD_EXPIRATION_MONTH_9,
            self::CREDIT_CARD_EXPIRATION_MONTH_10,
            self::CREDIT_CARD_EXPIRATION_MONTH_11,
            self::CREDIT_CARD_EXPIRATION_MONTH_12,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['shipping_first_name'] = isset($data['shipping_first_name']) ? $data['shipping_first_name'] : null;
        $this->container['shipping_last_name'] = isset($data['shipping_last_name']) ? $data['shipping_last_name'] : null;
        $this->container['shipping_address1'] = isset($data['shipping_address1']) ? $data['shipping_address1'] : null;
        $this->container['shipping_address2'] = isset($data['shipping_address2']) ? $data['shipping_address2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_province'] = isset($data['shipping_province']) ? $data['shipping_province'] : null;
        $this->container['shipping_postal_code'] = isset($data['shipping_postal_code']) ? $data['shipping_postal_code'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['billing_first_name'] = isset($data['billing_first_name']) ? $data['billing_first_name'] : null;
        $this->container['billing_last_name'] = isset($data['billing_last_name']) ? $data['billing_last_name'] : null;
        $this->container['billing_address1'] = isset($data['billing_address1']) ? $data['billing_address1'] : null;
        $this->container['billing_address2'] = isset($data['billing_address2']) ? $data['billing_address2'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_province'] = isset($data['billing_province']) ? $data['billing_province'] : null;
        $this->container['billing_postal_code'] = isset($data['billing_postal_code']) ? $data['billing_postal_code'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['shipping_method_id'] = isset($data['shipping_method_id']) ? $data['shipping_method_id'] : null;
        $this->container['affiliate_id'] = isset($data['affiliate_id']) ? $data['affiliate_id'] : null;
        $this->container['sub_id'] = isset($data['sub_id']) ? $data['sub_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['order_products'] = isset($data['order_products']) ? $data['order_products'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['credit_card_number'] = isset($data['credit_card_number']) ? $data['credit_card_number'] : null;
        $this->container['credit_card_expiration_month'] = isset($data['credit_card_expiration_month']) ? $data['credit_card_expiration_month'] : null;
        $this->container['credit_card_expiration_year'] = isset($data['credit_card_expiration_year']) ? $data['credit_card_expiration_year'] : null;
        $this->container['credit_card_cvv'] = isset($data['credit_card_cvv']) ? $data['credit_card_cvv'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['shipping_first_name'] === null) {
            $invalid_properties[] = "'shipping_first_name' can't be null";
        }
        if ($this->container['shipping_last_name'] === null) {
            $invalid_properties[] = "'shipping_last_name' can't be null";
        }
        if ($this->container['shipping_address1'] === null) {
            $invalid_properties[] = "'shipping_address1' can't be null";
        }
        if ($this->container['shipping_city'] === null) {
            $invalid_properties[] = "'shipping_city' can't be null";
        }
        if ($this->container['shipping_province'] === null) {
            $invalid_properties[] = "'shipping_province' can't be null";
        }
        if ($this->container['shipping_postal_code'] === null) {
            $invalid_properties[] = "'shipping_postal_code' can't be null";
        }
        if ($this->container['shipping_country'] === null) {
            $invalid_properties[] = "'shipping_country' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalid_properties[] = "'phone' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if (!preg_match("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", $this->container['email'])) {
            $invalid_properties[] = "invalid value for 'email', must be conform to the pattern ^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$.";
        }

        if ($this->container['billing_first_name'] === null) {
            $invalid_properties[] = "'billing_first_name' can't be null";
        }
        if ($this->container['billing_last_name'] === null) {
            $invalid_properties[] = "'billing_last_name' can't be null";
        }
        if ($this->container['billing_address1'] === null) {
            $invalid_properties[] = "'billing_address1' can't be null";
        }
        if ($this->container['billing_city'] === null) {
            $invalid_properties[] = "'billing_city' can't be null";
        }
        if ($this->container['billing_province'] === null) {
            $invalid_properties[] = "'billing_province' can't be null";
        }
        if ($this->container['billing_postal_code'] === null) {
            $invalid_properties[] = "'billing_postal_code' can't be null";
        }
        if ($this->container['billing_country'] === null) {
            $invalid_properties[] = "'billing_country' can't be null";
        }
        if ($this->container['shipping_method_id'] === null) {
            $invalid_properties[] = "'shipping_method_id' can't be null";
        }
        if ($this->container['order_products'] === null) {
            $invalid_properties[] = "'order_products' can't be null";
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'payment_type', must be one of #{allowed_values}.";
        }

        if ($this->container['credit_card_number'] === null) {
            $invalid_properties[] = "'credit_card_number' can't be null";
        }
        if ($this->container['credit_card_expiration_month'] === null) {
            $invalid_properties[] = "'credit_card_expiration_month' can't be null";
        }
        $allowed_values = array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12");
        if (!in_array($this->container['credit_card_expiration_month'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'credit_card_expiration_month', must be one of #{allowed_values}.";
        }

        if ($this->container['credit_card_expiration_year'] === null) {
            $invalid_properties[] = "'credit_card_expiration_year' can't be null";
        }
        if ($this->container['credit_card_cvv'] === null) {
            $invalid_properties[] = "'credit_card_cvv' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['shipping_first_name'] === null) {
            return false;
        }
        if ($this->container['shipping_last_name'] === null) {
            return false;
        }
        if ($this->container['shipping_address1'] === null) {
            return false;
        }
        if ($this->container['shipping_city'] === null) {
            return false;
        }
        if ($this->container['shipping_province'] === null) {
            return false;
        }
        if ($this->container['shipping_postal_code'] === null) {
            return false;
        }
        if ($this->container['shipping_country'] === null) {
            return false;
        }
        if ($this->container['phone'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if (!preg_match("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", $this->container['email'])) {
            return false;
        }
        if ($this->container['billing_first_name'] === null) {
            return false;
        }
        if ($this->container['billing_last_name'] === null) {
            return false;
        }
        if ($this->container['billing_address1'] === null) {
            return false;
        }
        if ($this->container['billing_city'] === null) {
            return false;
        }
        if ($this->container['billing_province'] === null) {
            return false;
        }
        if ($this->container['billing_postal_code'] === null) {
            return false;
        }
        if ($this->container['billing_country'] === null) {
            return false;
        }
        if ($this->container['shipping_method_id'] === null) {
            return false;
        }
        if ($this->container['order_products'] === null) {
            return false;
        }
        $allowed_values = array("1", "2", "3", "4", "5");
        if (!in_array($this->container['payment_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['credit_card_number'] === null) {
            return false;
        }
        if ($this->container['credit_card_expiration_month'] === null) {
            return false;
        }
        $allowed_values = array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12");
        if (!in_array($this->container['credit_card_expiration_month'], $allowed_values)) {
            return false;
        }
        if ($this->container['credit_card_expiration_year'] === null) {
            return false;
        }
        if ($this->container['credit_card_cvv'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_id
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param int $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets shipping_first_name
     * @return string
     */
    public function getShippingFirstName()
    {
        return $this->container['shipping_first_name'];
    }

    /**
     * Sets shipping_first_name
     * @param string $shipping_first_name
     * @return $this
     */
    public function setShippingFirstName($shipping_first_name)
    {
        $this->container['shipping_first_name'] = $shipping_first_name;

        return $this;
    }

    /**
     * Gets shipping_last_name
     * @return string
     */
    public function getShippingLastName()
    {
        return $this->container['shipping_last_name'];
    }

    /**
     * Sets shipping_last_name
     * @param string $shipping_last_name
     * @return $this
     */
    public function setShippingLastName($shipping_last_name)
    {
        $this->container['shipping_last_name'] = $shipping_last_name;

        return $this;
    }

    /**
     * Gets shipping_address1
     * @return string
     */
    public function getShippingAddress1()
    {
        return $this->container['shipping_address1'];
    }

    /**
     * Sets shipping_address1
     * @param string $shipping_address1
     * @return $this
     */
    public function setShippingAddress1($shipping_address1)
    {
        $this->container['shipping_address1'] = $shipping_address1;

        return $this;
    }

    /**
     * Gets shipping_address2
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address2'];
    }

    /**
     * Sets shipping_address2
     * @param string $shipping_address2
     * @return $this
     */
    public function setShippingAddress2($shipping_address2)
    {
        $this->container['shipping_address2'] = $shipping_address2;

        return $this;
    }

    /**
     * Gets shipping_city
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     * @param string $shipping_city
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_province
     * @return string
     */
    public function getShippingProvince()
    {
        return $this->container['shipping_province'];
    }

    /**
     * Sets shipping_province
     * @param string $shipping_province
     * @return $this
     */
    public function setShippingProvince($shipping_province)
    {
        $this->container['shipping_province'] = $shipping_province;

        return $this;
    }

    /**
     * Gets shipping_postal_code
     * @return string
     */
    public function getShippingPostalCode()
    {
        return $this->container['shipping_postal_code'];
    }

    /**
     * Sets shipping_postal_code
     * @param string $shipping_postal_code
     * @return $this
     */
    public function setShippingPostalCode($shipping_postal_code)
    {
        $this->container['shipping_postal_code'] = $shipping_postal_code;

        return $this;
    }

    /**
     * Gets shipping_country
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     * @param string $shipping_country
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {

        if (!preg_match("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", $email)) {
            throw new \InvalidArgumentException('invalid value for $email when calling OrderCreateModel., must be conform to the pattern ^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$.');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets billing_first_name
     * @return string
     */
    public function getBillingFirstName()
    {
        return $this->container['billing_first_name'];
    }

    /**
     * Sets billing_first_name
     * @param string $billing_first_name
     * @return $this
     */
    public function setBillingFirstName($billing_first_name)
    {
        $this->container['billing_first_name'] = $billing_first_name;

        return $this;
    }

    /**
     * Gets billing_last_name
     * @return string
     */
    public function getBillingLastName()
    {
        return $this->container['billing_last_name'];
    }

    /**
     * Sets billing_last_name
     * @param string $billing_last_name
     * @return $this
     */
    public function setBillingLastName($billing_last_name)
    {
        $this->container['billing_last_name'] = $billing_last_name;

        return $this;
    }

    /**
     * Gets billing_address1
     * @return string
     */
    public function getBillingAddress1()
    {
        return $this->container['billing_address1'];
    }

    /**
     * Sets billing_address1
     * @param string $billing_address1
     * @return $this
     */
    public function setBillingAddress1($billing_address1)
    {
        $this->container['billing_address1'] = $billing_address1;

        return $this;
    }

    /**
     * Gets billing_address2
     * @return string
     */
    public function getBillingAddress2()
    {
        return $this->container['billing_address2'];
    }

    /**
     * Sets billing_address2
     * @param string $billing_address2
     * @return $this
     */
    public function setBillingAddress2($billing_address2)
    {
        $this->container['billing_address2'] = $billing_address2;

        return $this;
    }

    /**
     * Gets billing_city
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     * @param string $billing_city
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_province
     * @return string
     */
    public function getBillingProvince()
    {
        return $this->container['billing_province'];
    }

    /**
     * Sets billing_province
     * @param string $billing_province
     * @return $this
     */
    public function setBillingProvince($billing_province)
    {
        $this->container['billing_province'] = $billing_province;

        return $this;
    }

    /**
     * Gets billing_postal_code
     * @return string
     */
    public function getBillingPostalCode()
    {
        return $this->container['billing_postal_code'];
    }

    /**
     * Sets billing_postal_code
     * @param string $billing_postal_code
     * @return $this
     */
    public function setBillingPostalCode($billing_postal_code)
    {
        $this->container['billing_postal_code'] = $billing_postal_code;

        return $this;
    }

    /**
     * Gets billing_country
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     * @param string $billing_country
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets shipping_method_id
     * @return int
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     * @param int $shipping_method_id
     * @return $this
     */
    public function setShippingMethodId($shipping_method_id)
    {
        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }

    /**
     * Gets affiliate_id
     * @return int
     */
    public function getAffiliateId()
    {
        return $this->container['affiliate_id'];
    }

    /**
     * Sets affiliate_id
     * @param int $affiliate_id
     * @return $this
     */
    public function setAffiliateId($affiliate_id)
    {
        $this->container['affiliate_id'] = $affiliate_id;

        return $this;
    }

    /**
     * Gets sub_id
     * @return int
     */
    public function getSubId()
    {
        return $this->container['sub_id'];
    }

    /**
     * Sets sub_id
     * @param int $sub_id
     * @return $this
     */
    public function setSubId($sub_id)
    {
        $this->container['sub_id'] = $sub_id;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets order_products
     * @return \Swagger\Client\Model\OrderProduct[]
     */
    public function getOrderProducts()
    {
        return $this->container['order_products'];
    }

    /**
     * Sets order_products
     * @param \Swagger\Client\Model\OrderProduct[] $order_products
     * @return $this
     */
    public function setOrderProducts($order_products)
    {
        $this->container['order_products'] = $order_products;

        return $this;
    }

    /**
     * Gets payment_type
     * @return int
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     * @param int $payment_type
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowed_values = array('1', '2', '3', '4', '5');
        if (!in_array($payment_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'payment_type', must be one of '1', '2', '3', '4', '5'");
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets credit_card_number
     * @return string
     */
    public function getCreditCardNumber()
    {
        return $this->container['credit_card_number'];
    }

    /**
     * Sets credit_card_number
     * @param string $credit_card_number
     * @return $this
     */
    public function setCreditCardNumber($credit_card_number)
    {
        $this->container['credit_card_number'] = $credit_card_number;

        return $this;
    }

    /**
     * Gets credit_card_expiration_month
     * @return int
     */
    public function getCreditCardExpirationMonth()
    {
        return $this->container['credit_card_expiration_month'];
    }

    /**
     * Sets credit_card_expiration_month
     * @param int $credit_card_expiration_month
     * @return $this
     */
    public function setCreditCardExpirationMonth($credit_card_expiration_month)
    {
        $allowed_values = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12');
        if (!in_array($credit_card_expiration_month, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'credit_card_expiration_month', must be one of '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'");
        }
        $this->container['credit_card_expiration_month'] = $credit_card_expiration_month;

        return $this;
    }

    /**
     * Gets credit_card_expiration_year
     * @return int
     */
    public function getCreditCardExpirationYear()
    {
        return $this->container['credit_card_expiration_year'];
    }

    /**
     * Sets credit_card_expiration_year
     * @param int $credit_card_expiration_year
     * @return $this
     */
    public function setCreditCardExpirationYear($credit_card_expiration_year)
    {
        $this->container['credit_card_expiration_year'] = $credit_card_expiration_year;

        return $this;
    }

    /**
     * Gets credit_card_cvv
     * @return string
     */
    public function getCreditCardCvv()
    {
        return $this->container['credit_card_cvv'];
    }

    /**
     * Sets credit_card_cvv
     * @param string $credit_card_cvv
     * @return $this
     */
    public function setCreditCardCvv($credit_card_cvv)
    {
        $this->container['credit_card_cvv'] = $credit_card_cvv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


